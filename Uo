To calculate the evaluation metrics (accuracy, precision, recall, F1 score, specificity) for each loan purpose separately, you can adapt the code to group the data by loan purpose and compute the metrics within each group. Hereâ€™s how you can modify your code:

```python
import pandas as pd
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from tabulate import tabulate  # Assuming you have tabulate installed for pretty printing

# Example data setup (replace with your actual data)
data = {
    'LoanPurpose': ['Home Improvement', 'Debt Consolidation', 'Home Improvement', 'Debt Consolidation'],
    'y_true': [1, 0, 1, 1],
    'y_score': [0.03, 0.025, 0.02, 0.035]  # Example predicted scores
}

df = pd.DataFrame(data)

# Calculate metrics for each loan purpose
loan_purposes = df['LoanPurpose'].unique()
results = []

for purpose in loan_purposes:
    subset = df[df['LoanPurpose'] == purpose]
    y_true = subset['y_true']
    y_score = subset['y_score']

    # Apply threshold
    threshold = 0.028
    y_pred = (y_score >= threshold).astype(int)

    # Calculate confusion matrix and metrics
    tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, zero_division=1)  # Handle zero division with default value
    recall = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    specificity = tn / (tn + fp) if (tn + fp) != 0 else 0

    results.append({
        'LoanPurpose': purpose,
        'Accuracy': accuracy,
        'Precision': precision,
        'Recall': recall,
        'F1 Score': f1,
        'Specificity': specificity
    })

# Print results using tabulate for a nice table format
print(tabulate(results, headers='keys', tablefmt='pretty'))
```

### Explanation:

1. **Grouping by Loan Purpose**: `loan_purposes = df['LoanPurpose'].unique()` identifies unique loan purposes in your dataset.
  
2. **Iterating through Loan Purposes**: The loop iterates through each unique loan purpose, extracts data subset (`subset`) for that purpose, and computes metrics based on actual (`y_true`) and predicted (`y_pred`) values.

3. **Metrics Calculation**: Within each loop iteration:
   - `y_true` and `y_score` are extracted from the subset.
   - `y_pred` is computed based on a threshold (`0.028` in this example).
   - Metrics (`accuracy`, `precision`, `recall`, `f1_score`, `specificity`) are computed using `sklearn.metrics` functions.

4. **Tabulate for Output**: The `tabulate` function is used to print the results in a clear, formatted table (`tablefmt='pretty'`).

This approach allows you to compute and display evaluation metrics tailored to each loan purpose category in your dataset, ensuring you can analyze model performance across different segments effectively. Adjust the threshold or any other parameters based on your specific needs and data characteristics.
