/***********************************************************/
/* Step 1: Subset Data by Basel Event Type Level 1        */
/***********************************************************/
%macro create_subset(event_label, dataset_name);
    data &dataset_name;
        set event_w_exclusion_agg;
        where 'Basel Event Type Level 1'n = "&event_label";
    run;
%mend;

%create_subset(ET1 - Internal Fraud, agg_IF);
%create_subset(ET2 - External Fraud, agg_EF);
%create_subset(ET3 - Employment Practices & Workplace Safety, agg_EPWS);

/***********************************************************/
/* Step 2: Perform Data Quality Checks for Each Subset    */
/***********************************************************/
%macro check_data_quality(dataset, event_code);

/* A) Distribution of Variables (Continuous + Categorical) */
proc means data=&dataset n nmiss min max mean std;
    var freq severity;
    title "&event_code: Distribution of Continuous Variables";
run;

proc freq data=&dataset;
    tables 'Basel Event Type Level 1'n / missing;
    title "&event_code: Distribution of Categorical Variables";
run;

/* B) Check for Missing Values */
proc means data=&dataset nmiss;
    var freq severity;
    title "&event_code: Missing Value Check";
run;

/* C) Check for Duplicates on gl_date */
proc freq data=&dataset noprint;
    tables gl_date / out=_&event_code._dup(drop=percent);
run;

data _&event_code._dup_filtered;
    set _&event_code._dup;
    if count > 1;
run;

proc sql noprint;
    select count(*) into :num_dup from _&event_code._dup_filtered;
quit;

%put NOTE: &event_code => &num_dup duplicates found for gl_date;
%if &num_dup > 0 %then %do;
    proc print data=_&event_code._dup_filtered(obs=5);
        var gl_date count;
        title "&event_code: Sample Duplicates (Top 5)";
    run;
%end;

/* D) Outlier Detection using IQR Method */
proc univariate data=&dataset noprint;
    var severity;
    output out=_&event_code._iqr pctlpts=25 75 pctlpre=P_;
run;

data _null_;
    set _&event_code._iqr;
    iqr = P_75 - P_25;
    lower_cut = P_25 - 1.5 * iqr;
    upper_cut = P_75 + 1.5 * iqr;
    call symputx("&event_code._lower", lower_cut);
    call symputx("&event_code._upper", upper_cut);
run;

data _&event_code._outliers;
    set &dataset;
    if severity < &&&event_code._lower or severity > &&&event_code._upper then outlier_flag=1;
run;

proc sql noprint;
    select count(*) into :num_out from _&event_code._outliers where outlier_flag=1;
quit;

%put NOTE: &event_code => &num_out severity outliers;
%if &num_out > 0 %then %do;
    proc print data=_&event_code._outliers(obs=5);
        where outlier_flag=1;
        var gl_date freq severity;
        title "&event_code: Severity Outliers (Top 5)";
    run;
%end;

/* E) Consistency Check - Ensure Frequency & Severity >= 0 */
data _&event_code._consistency;
    set &dataset;
    if freq < 0 then consistency_flag = "Negative Frequency";
    if severity < 0 then consistency_flag = "Negative Severity";
run;

proc sql noprint;
    select count(*) into :num_consistency from _&event_code._consistency where consistency_flag is not missing;
quit;

%put NOTE: &event_code => &num_consistency consistency issues;
%if &num_consistency > 0 %then %do;
    proc print data=_&event_code._consistency(obs=5);
        where consistency_flag is not missing;
        var gl_date freq severity consistency_flag;
        title "&event_code: Consistency Issues (Top 5)";
    run;
%end;

%mend;

/***********************************************************/
/* Step 3: Run the Data Quality Check for All Categories  */
/***********************************************************/
%check_data_quality(agg_IF, IF);
%check_data_quality(agg_EF, EF);
%check_data_quality(agg_EPWS, EPWS);
