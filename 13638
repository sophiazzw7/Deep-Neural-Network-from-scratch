/***********************************************************/
/* Let's assume these 3 examples. Repeat as needed.        */
/***********************************************************/
data agg_IF;
    set event_w_exclusion_agg;
    where 'Basel Event Type Level 1'n = "ET1 - Internal Fraud";
run;

data agg_EF;
    set event_w_exclusion_agg;
    where 'Basel Event Type Level 1'n = "ET2 - External Fraud";
run;

data agg_EPWS;
    set event_w_exclusion_agg;
    where 'Basel Event Type Level 1'n = 
          "ET3 - Employment Practices & Workplace Safety";
run;

/* Then do the same checks on each. 
   For brevity, let's show one example (agg_IF). 
   Repeat for agg_EF, agg_EPWS, etc.
*/

/***************************************************/
/* Example: Checking agg_IF (Internal Fraud)       */
/***************************************************/

/* A) Basic Numeric Summary (freq, severity) */
proc means data=agg_IF n nmiss min max mean std noprint;
    var freq severity;
    output out=_IF_means(drop=_type_ _freq_)
        n= n_freq n_sev
        nmiss= nm_freq nm_sev
        min= min_freq min_sev
        max= max_freq max_sev
        mean= mean_freq mean_sev
        std= std_freq std_sev
    ;
run;

data _null_;
    set _IF_means;
    put "=== agg_IF (ET1) freq & severity Stats ===";
    put "freq: N=" n_freq " Nmiss=" nm_freq 
        " Min=" min_freq " Max=" max_freq " Mean=" mean_freq best8.2;
    put "severity: N=" n_sev " Nmiss=" nm_sev 
        " Min=" min_sev " Max=" max_sev " Mean=" mean_sev best8.2;
run;

/* B) Duplicate check => gl_date 
      (since now there's only 1 Basel type in each dataset) */
proc freq data=agg_IF noprint;
    tables gl_date / out=_IF_dup(drop=percent);
run;

data _IF_dup2;
    set _IF_dup;
    if count>1;
run;

proc sql noprint;
    select count(*) into :num_dup_IF from _IF_dup2;
quit;

%put NOTE: agg_IF => &num_dup_IF duplicates by gl_date;

%if &num_dup_IF > 0 %then %do;
    title "agg_IF: Sample Duplicates (gl_date) (Top 5)";
    proc print data=_IF_dup2(obs=5);
        var gl_date count;
    run;
%end;

/* C) Outlier check => severity IQR */
proc univariate data=agg_IF noprint;
    var severity;
    output out=_IF_iqr pctlpts=25 75 pctlpre=P_;
run;

data _null_;
    set _IF_iqr;
    iqr = P_75 - P_25;
    lower_cut = P_25 - 1.5*iqr;
    upper_cut = P_75 + 1.5*iqr;
    call symputx('IF_lower', lower_cut);
    call symputx('IF_upper', upper_cut);
run;

data _IF_outliers;
    set agg_IF;
    if severity < &IF_lower or severity > &IF_upper then outlier_flag=1;
run;

proc sql noprint;
    select count(*) into :num_out_IF
    from _IF_outliers
    where outlier_flag=1;
quit;

%put NOTE: agg_IF => &num_out_IF severity outliers;

%if &num_out_IF>0 %then %do;
    title "agg_IF: severity Outliers (Top 5)";
    proc print data=_IF_outliers(obs=5);
       where outlier_flag=1;
       var gl_date freq severity;
    run;
%end;

/***************************************************/
/* D) Repeat for agg_EF, agg_EPWS, etc.           */
/***************************************************/
/* e.g.:

   proc means data=agg_EF ... 
   ...
   proc univariate data=agg_EF ...
   ...
*/
