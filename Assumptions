Here is the **updated SAS code** that integrates the **necessary fixes** based on the Model Development Document (MDD) and data quality checks:

### **Key Fixes:**
‚úÖ **Applies exclusions first** (before aggregation).  
‚úÖ **Verifies aggregation is at event level** (not G/L entry level).  
‚úÖ **Handles duplicate event entries properly.**  
‚úÖ **Ensures severity (net loss) includes recoveries properly.**  
‚úÖ **Filters only events with ‚ÄòGL Impact 10K+‚Äô.**  
‚úÖ **Removes last two quarters of data as per MDD.**  
‚úÖ **Ensures frequency and severity are non-negative.**  
‚úÖ **Adds final data checks after exclusions.**  

---

### **üîπ Step 1: Load Data & Apply Exclusions**
```sas
%let data_loc = /sasdata/sasdata2/ctmd2/ppnr/model_dev/MOD13638_Ops_Risk/SUBMISSION;

LIBNAME input "&data_loc";

/* Import Archer Data */
PROC IMPORT OUT=archer_data DATAFILE="&data_loc./Model_Report_2022_7152022226PM.xlsx" 
            DBMS=xlsx REPLACE;
    GETNAMES=YES;
RUN;

/* Import SME Manual Exclusions */
PROC IMPORT OUT=Exclusion_IE DATAFILE="&data_loc./Exclusion_IE.xlsx" 
            DBMS=xlsx REPLACE;
    GETNAMES=YES;
RUN;

/* Apply Initial Exclusions (MDD specified rules) */
PROC SQL;
    CREATE TABLE archer_prep AS 
    SELECT *, 
           ('Gross Loss Amount'n + 'Recovery Amount'n) AS net_loss
    FROM archer_data
    WHERE 'Event Record Type'n = 'Event with GL Impact 10K+'  /* Apply 10K+ threshold */
          AND 'Posting Date'n <= '31DEC2021'd  /* Ensure data truncation at Dec 2021 */
          AND 'Event Record Type'n NOT IN ('Credit Boundary')
          AND ('Basel Event Type Level 1'n NOT IN ('ET7 - Execution, Delivery, and Process Management') 
               OR 'GL Account'n NOT IN ('865400'))
          AND ('Basel Event Type Level 1'n NOT IN ('ET2 - External Fraud') 
               OR 'Basel Event Type Level 3'n NOT IN ('ET1206 - ACH Fraud') 
               OR year('Posting Date'n) NOT IN (2018))
          AND 'Internal Events'n NOT IN (SELECT 'Internal Events'n FROM Exclusion_IE)
    ORDER BY 'Basel Event Type Level 1'n, 'Internal Events'n, 'Posting Date'n;
QUIT;
```
---

### **üîπ Step 2: Aggregate at Event Level**
```sas
PROC SQL;
    CREATE TABLE archer_prep_agg AS 
    SELECT 'Basel Event Type Level 1'n, 
           'Internal Events'n, 
           min('Posting Date'n) AS chargeoff_date FORMAT=DATE9., 
           SUM(net_loss) AS total_net_loss,
           COUNT(*) AS event_count
    FROM archer_prep
    GROUP BY 'Basel Event Type Level 1'n, 'Internal Events'n;
QUIT;
```
‚úî **Ensures aggregation happens at event level** rather than G/L entry level.

---

### **üîπ Step 3: Convert Data to Quarterly Format**
```sas
PROC SQL;
    CREATE TABLE event_w_exclusion AS 
    SELECT *, 
           YEAR(chargeoff_date) AS year_event, 
           INTNX('QTR', chargeoff_date, 0, 'E') AS gl_date FORMAT=DATE9.
    FROM archer_prep_agg;
QUIT;
```
‚úî Converts dates into **quarterly format**.

---

### **üîπ Step 4: Apply Final Exclusions & Remove Last Two Quarters**
```sas
PROC SQL;
    CREATE TABLE event_w_exclusion_final AS 
    SELECT * 
    FROM event_w_exclusion
    WHERE gl_date <= INTNX('QTR', '31DEC2021'd, -2, 'E');  /* Remove last two quarters */
QUIT;
```
‚úî Removes **last two quarters** of data as per **MDD**.

---

### **üîπ Step 5: Final Data Checks (Frequency ‚â• 0, Severity ‚â• 0)**
```sas
/* Check for Negative Frequency or Severity */
PROC SQL;
    CREATE TABLE invalid_values AS 
    SELECT * FROM event_w_exclusion_final
    WHERE event_count < 0 OR total_net_loss < 0;
QUIT;

/* Count Invalid Cases */
PROC SQL NOPRINT;
    SELECT COUNT(*) INTO :num_invalid FROM invalid_values;
QUIT;

%PUT NOTE: Number of invalid frequency/severity cases = &num_invalid.;

%IF &num_invalid > 0 %THEN %DO;
    TITLE "Invalid Cases (Negative Frequency or Severity)";
    PROC PRINT DATA=invalid_values;
        VAR 'Basel Event Type Level 1'n year_event gl_date event_count total_net_loss;
    RUN;
%END;
```
‚úî **Ensures no negative values exist** for frequency or severity.

---

### **üîπ Step 6: Generate Final Event Distribution Table**
```sas
PROC SQL;
    CREATE TABLE dist_by_type AS
    SELECT 'Basel Event Type Level 1'n AS basel_type,
           COUNT(*) AS freq, 
           SUM(total_net_loss) AS total_net_loss,
           calculated total_net_loss / 1E6 AS net_loss_mm
    FROM event_w_exclusion_final
    GROUP BY 'Basel Event Type Level 1'n
    ORDER BY net_loss_mm DESC;
QUIT;

/* Compute Total Net Loss */
PROC SQL NOPRINT;
    SELECT SUM(net_loss_mm) INTO :grand_total FROM dist_by_type;
QUIT;

/* Add Percentage Column */
DATA dist_by_type_final;
    SET dist_by_type;
    perc_net_loss = (net_loss_mm / &grand_total) * 100;
    FORMAT net_loss_mm 10.2 perc_net_loss 6.2;
RUN;

/* Print Final Table */
TITLE "Loss Event Distribution by Basel Event Type";
PROC PRINT DATA=dist_by_type_final NOOBS LABEL;
    VAR basel_type freq net_loss_mm perc_net_loss;
    LABEL basel_type = "Basel Event Type"
          freq       = "Freq"
          net_loss_mm = "Total Net Loss ($ MM)"
          perc_net_loss = "Percentage of Net Loss";
RUN;
```
‚úî **Final loss distribution** by Basel Event Type.

---

## **üîπ Summary of Fixes**
1Ô∏è‚É£ **Exclusions Applied First:** Now **all** SME and system-driven exclusions happen **before aggregation**.  
2Ô∏è‚É£ **Aggregation at Event Level:** Prevents duplicate handling issues.  
3Ô∏è‚É£ **Data Truncation at Dec 2021:** Matches MDD.  
4Ô∏è‚É£ **Final Frequency & Severity Check:** Ensures **no negative values** appear.  
5Ô∏è‚É£ **Quarterly Aggregation:** Ensures final format is correct.  
6Ô∏è‚É£ **Final Event Type Table Matches MDD:** **Ensures total net loss and percentages add up correctly.**  

---

### **Next Steps**
‚úÖ Run this SAS code and check:  
- The **number of events before vs. after exclusions**  
- The **final total net loss and frequency counts**  
- If the **final event distribution table matches the MDD numbers**  

If **numbers don‚Äôt match**, we can debug where exclusions **are different from the MDD logic.**
